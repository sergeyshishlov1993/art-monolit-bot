const express = require("express");
const { Telegraf } = require("telegraf");
const { admin, doc, updateDoc } = require("./module/firebaseConfig");

const telegramConfig = require("./module/telegramConfig");

const app = express();
const bot = new Telegraf(telegramConfig.TELEGRAM_BOT_TOKEN);

const sendNotification = (message) => {
  bot.telegram.sendMessage(telegramConfig.TELEGRAM_ID, message);
};

// // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ Firebase
function databaseSubscription() {
  const db = admin.firestore();
  const feedbackRef = db.collection("feedback");

  feedbackRef
    .orderBy("timestamp", "desc")
    .limit(1)
    .onSnapshot((snapshot) => {
      snapshot.docChanges().forEach((change) => {
        if (change.type === "added" || change.type === "modified") {
          const newData = change.doc.data();
          const statusEmoji = newData.status === "–≤ –æ–±—Ä–æ–±—Ü—ñ" ? "üî¥" : "üü¢";
          const message = `
            –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å üòä:
    
            üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ :
            
            ${newData.phone},
    
            üßë  –ò–º—è:    ${newData.name},
    
             üìÖ –î–∞—Ç–∞:  ${newData.date},
    
             ${statusEmoji} –°—Ç–∞—Ç—É—Å: ${newData.status}
    
            -------------------------------------------
             `;

          sendNotification(message);
        }
      });
    });
}

databaseSubscription();

bot.start(async (ctx) => {
  await databaseSubscription();
  ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ${ctx.chat.first_name} ${ctx.chat.last_name}!`
  );
});

bot.action(async (ctx) => {
  const db = admin.firestore();

  const buttonId = ctx;

  const updateData = {
    status: "–≤–∏–∫–æ–Ω–∞–Ω–Ω–æ",
  };

  try {
    if (buttonId && typeof buttonId === "string" && buttonId.trim() !== "") {
      const docRef = db.collection("feedback").doc(buttonId);
      await docRef.update(updateData);
      console.log("–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω");
    } else {
      console.error("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞");
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:", error);
  }
});

bot.command("get", (ctx) => {
  const db = admin.firestore();
  const feedbackRef = db.collection("feedback");

  function getFeedbackInProcess() {
    return new Promise(async (resolve, reject) => {
      await feedbackRef
        .where("status", "==", "–≤ –æ–±—Ä–æ–±—Ü—ñ")
        .get()
        .then((querySnapshot) => {
          querySnapshot.forEach((doc) => {
            console.log(doc.id);
            const statusEmoji = doc.data().status === "–≤ –æ–±—Ä–æ–±—Ü—ñ" ? "üî¥" : "üü¢";

            const message = `

                –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã–µ –∑–∞—è–≤–∫–∏  üòä:

                üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ :
                              
                ${doc.data().phone},

                üßë  –ò–º—è:    ${doc.data().name},

                üìÖ –î–∞—Ç–∞:  ${doc.data().date},

                ${statusEmoji} –°—Ç–∞—Ç—É—Å: ${doc.data().status}

                 -------------------------------------------
                          `;

            ctx.reply(message, {
              reply_markup: {
                inline_keyboard: [
                  [{ text: "–í–´–ü–û–õ–ù–ò–¢–¨", callback_data: doc.id }],
                ],
              },
            });
          });
        })
        .catch((error) => {
          reject(error);
        });
    });
  }
  getFeedbackInProcess();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`Ooops, encountered an error for ${ctx.updateType}`, err);
});

// –ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
bot
  .launch()
  .then(() => console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω"))
  .catch((err) => console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:", err));

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ Express.js
const PORT = process.env.PORT || 3002;
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä Express.js –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
