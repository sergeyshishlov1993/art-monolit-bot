const express = require("express");
const { Telegraf } = require("telegraf");
const { admin, doc, updateDoc } = require("./module/firebaseConfig");

const telegramConfig = require("./module/telegramConfig");

const app = express();
const bot = new Telegraf(telegramConfig.TELEGRAM_BOT_TOKEN);

app.use(express.json());

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫
app.post("/", bot.webhookCallback("/"));

// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ URL –≤–µ–±—Ö—É–∫–∞

function convertTimestampToReadable(timestamp) {
  const seconds = timestamp._seconds;
  const nanoseconds = timestamp._nanoseconds;

  const date = new Date(seconds * 1000 + nanoseconds / 1000000);

  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, "0");
  const day = String(date.getDate()).padStart(2, "0");
  const hours = String(date.getHours()).padStart(2, "0");
  const minutes = String(date.getMinutes()).padStart(2, "0");
  const secondsFormatted = String(date.getSeconds()).padStart(2, "0");

  return `${year}-${month}-${day} ${hours}:${minutes}:${secondsFormatted}`;
}

const sendNotification = (message) => {
  bot.telegram.sendMessage(telegramConfig.TELEGRAM_ID, message);
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ Firebase
function databaseSubscription() {
  const db = admin.firestore();
  const feedbackRef = db.collection("feedbacks");

  feedbackRef
    .orderBy("timestamp", "desc")
    .limit(1)
    .onSnapshot((snapshot) => {
      snapshot.docChanges().forEach((change) => {
        if (change.type === "added" || change.type === "modified") {
          const newData = change.doc.data();
          const readableTimestamp = convertTimestampToReadable(
            newData.timestamp
          );
          console.log(newData);
          const message = `
            –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å üòä:
    
            üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ :
            
            ${newData.phone},
    
            üßë  –ò–º—è:    ${newData.firstName},
    
             üìÖ –î–∞—Ç–∞: ${readableTimestamp},
    
            -------------------------------------------
             `;

          sendNotification(message);
        }
      });
    });
}

databaseSubscription();

bot.start(async (ctx) => {
  await databaseSubscription();
  ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ${ctx.chat.first_name} ${ctx.chat.last_name}!`
  );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
bot.command("status", (ctx) => {
  ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫:", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç", callback_data: "–ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç" }],
        [{ text: "–í –ø—Ä–æ—Ü–µ—Å—Å–µ", callback_data: "–í –ø—Ä–æ—Ü–µ—Å—Å–µ" }],
        [{ text: "–í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data: "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" }],
      ],
    },
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
bot.action(async (ctx) => {
  const status = ctx.callbackQuery.data; // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å

  const db = admin.firestore();
  const feedbackRef = db.collection("feedbacks");

  feedbackRef
    .where("status", "==", status) // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—É
    .get()
    .then((querySnapshot) => {
      if (querySnapshot.empty) {
        ctx.reply(`–ó–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${status}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
        return;
      }

      querySnapshot.forEach((doc) => {
        const feedback = doc.data();
        const readableTimestamp = convertTimestampToReadable(
          feedback.timestamp
        );

        const message = `
          –ó–∞—è–≤–∫–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ${status}:
          üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${feedback.phone},
          üßë –ò–º—è: ${feedback.firstName},
          üìÖ –î–∞—Ç–∞: ${readableTimestamp},
          -------------------------------------------
        `;

        ctx.reply(message, {
          reply_markup: {
            inline_keyboard: [[{ text: "–í–´–ü–û–õ–ù–ò–¢–¨", callback_data: doc.id }]],
          },
        });
      });
    })
    .catch((error) => {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫:", error);
      ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫.");
    });
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
bot.command("get", (ctx) => {
  const db = admin.firestore();
  const feedbackRef = db.collection("feedbacks");

  feedbackRef
    .where("status", "==", "–ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç")
    .get()
    .then((querySnapshot) => {
      querySnapshot.forEach((doc) => {
        const message = `
          –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏  üòä:
          üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${doc.data().phone},
          üßë –ò–º—è: ${doc.data().firstName},
          üìÖ –î–∞—Ç–∞: ${doc.data().date},
          -------------------------------------------
        `;

        ctx.reply(message, {
          reply_markup: {
            inline_keyboard: [[{ text: "–í–´–ü–û–õ–ù–ò–¢–¨", callback_data: doc.id }]],
          },
        });
      });
    })
    .catch((error) => {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫:", error);
      ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫.");
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`Ooops, encountered an error for ${ctx.updateType}`, err);
});

// –ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
// bot
//   .launch()
//   .then(() => console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω"))
//   .catch((err) => console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:", err));

bot.telegram.setWebhook("https://art-monolit-bot.vercel.app/");

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ Express.js
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä Express.js –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
